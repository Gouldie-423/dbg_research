Two directories fall within dataflow

database_management: contains two files
-database_config: config file for db control. contains database engine strings, tickers (pull_SP_tickers), column formatting (rename_df_columns), and technical indicator generation for moving average, MACD, and RSI (df_columns)
-db_control: primary workspace for pulling stock market data into db. 3 functions in total. First grabs data from yahoo finance using yfinance library. Functions from config file are used to format correctly (pull_data). Data is then written using (write_data). Each technical indicator has its own table to help with scalability and data leakage if a new indicator is required the entire db does not need to be re-written. Last function is called (run). This function cycles through each of the tickers pulled using the function in the config file . In the event of a job fail a quick query will be run to ensure that duplicate data is not added to the db when restarted. 

trade_data_algorithm: contains 3 files
-trade_sim_config: contains the trade class. This class was the backbone of how market identities were found. The actual __init__ has all of the required individual metrics as variables within each class. buy_flag/sell_flag are the buy/sell criteria. the export function calculates some of the variables requires as well as identifying what training data needs to be pulled and writing all of it to the db. 
-trade_sim: contains the primary workspace. Tradesim function loops through each ticker we're working with, retrieves data from db & uses an explicit for loop to go through each day in the dataframe in chronological order looking for a buy critieria. If found, it holds its place and begins looking for the sell criteria, once that is found it breaks and a new buysearch begins moving through the same timeline. the run function only served to make it easier to swap between date ranges by changing the value of a flag I pass in as an argument.
-paper_vis: three functions that were used to visualize data in a few diff ways. graph_gen visualizes a standardization practice of moving averages on each individual trade. timeline_pull visualizes the number of samples by year. timeline_graph_gen visualizes the number of wins and losses year over year. trading_frequency_graph visualizes the number of securities vs the number of trades as a way to visualize how many times each security meets the buy criteria